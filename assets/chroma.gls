@uniform sampler2D u_diffuse_map
@uniform Mat4 u_projection
@uniform Mat4 u_view
@uniform Mat4 u_model
@attrib Point3 a_vertex
@attrib Point3 a_normal
@attrib Point2 a_texcoord
@varying smooth Point2 v_texcoord
@out rgba8 color o_color

@shader vertex

void main() {
	gl_Position = u_projection * u_view * u_model * vec4(a_vertex, 1.0);
	v_texcoord = a_texcoord;
}

@shader fragment

void main() {
	vec2 texcoord = v_texcoord;

	// TODO: use aspectCorrect or u_resolution for pixel-correct aberration
	//float aspect = u_resolution.x / u_resolution.y;
	//vec2 aspectCorrect = vec2(1.0, aspect);

	float amount = 0.002;

	vec3 color;
	color.r = texture(u_diffuse_map, vec2(texcoord.x + amount, texcoord.y)).r;
	color.g = texture(u_diffuse_map, texcoord).g;
	color.b = texture(u_diffuse_map, vec2(texcoord.x - amount, texcoord.y)).b;

	color *= (1.0 - amount * 0.5);

	o_color = vec4(color, 1.0);
}
