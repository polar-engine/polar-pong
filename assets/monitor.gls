@uniform sampler2D u_diffuse_map
@uniform Mat4 u_projection
@uniform Mat4 u_view
@uniform Mat4 u_model
@attrib Point3 a_vertex
@attrib Point3 a_normal
@attrib Point2 a_texcoord
@varying smooth Point3 v_vertex
@varying smooth Point3 v_normal
@varying smooth Point2 v_texcoord
@out rgba8 color o_color

@shader vertex

void main() {
	vec4 model_vertex = u_view * u_model * vec4(a_vertex, 1.0);
	gl_Position = u_projection * model_vertex;

	v_vertex = vec3(model_vertex);
	v_normal = mat3(transpose(inverse(u_view * u_model))) * a_normal;
	v_texcoord = a_texcoord;
}

@shader fragment

void main() {
	vec2 texcoord = v_texcoord;

	vec3 diffuse_color = vec3(texture(u_diffuse_map, texcoord));
	diffuse_color.g += 0.2;

	vec3 light_pos = vec3(0.0, 0.0, 0.0);

	vec3 normal = normalize(v_normal);
	vec3 light_dir = normalize(light_pos - v_vertex);

	float diffuse_impact = max(dot(normal, light_dir), 0.0);
	vec3 diffuse = diffuse_impact * diffuse_color;

	vec3 final = diffuse;
	o_color = vec4(final, 1.0);
}
